import os
import re
import shutil
from openpyxl import Workbook
from datetime import datetime
from SqlHandler import connect_to_database  # Import the database connection function

def parse_notepad_files(input_folder, backup_folder):
    # Connect to the database
    conn = connect_to_database()
    if not conn:
        print("Exiting program due to database connection failure.")
        return  # Exit if the database connection fails

    cursor = conn.cursor()

    # Check if there are any files matching the pattern
    notepad_files = [f for f in os.listdir(input_folder) if f.startswith("notepad") and f.endswith(".txt")]
    if not notepad_files:
        print("No notepad files found. Exiting program.")
        return  # Exit the function if no files are found

    # Create a new workbook for all extracted data
    workbook = Workbook()
    sheet = workbook.active
    sheet.title = "Extracted Data"

    # Write headers
    sheet.append([
        "Orderable Part Section", "Part Number", "Description", "Primary Die",
        "Piece Parts", "Part NumberF", "DescriptionF", "Part NumberE", "DescriptionE",
        "Part NumberW", "DescriptionW", "Part NumberM", "DescriptionM",
        "Revision History (Date)", "Revision History (Details)", "Package Kit"
    ])

    # Get the current date and time for file naming
    now = datetime.now()
    process_date = now.strftime("%m%d%Y")
    timestamp = now.strftime("%m%d%S%Y")  # Format for the output file name

    # Process all files matching the pattern
    for file_name in notepad_files:
        file_path = os.path.join(input_folder, file_name)
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()

        # Clean up special characters
        content = re.sub(r'[^\x00-\x7F]+', ' ', content)

        # Extract "Orderable Part Section - <Dynamic>"
        section_match = re.search(r"Orderable Part Section\s+(-\s+[^\n]+)", content)
        section_name = section_match.group(1).strip() if section_match else "Section Not Found"

        # Extract "Part Number | Desc"
        part_number_desc = re.search(r"Part Number \| Desc\s+([^\n]+)", content)
        if part_number_desc:
            part_number_desc_value = part_number_desc.group(1)
            # Split the part number and description
            part_number, part_desc = map(str.strip, part_number_desc_value.split('|', 1))
        else:
            part_number = "Part Number Not Found"
            part_desc = "Description Not Found"
        
        # Extract all Alternate sections dynamically
        alternates = re.findall(r"(Alternate \d{3}).*?(BOI 67-Bonding Diagram|$)", content, re.DOTALL)
        if not alternates:
            print("No Alternate sections found. Skipping file.")
            continue

        for alternate, _ in alternates:
            print(f"Processing {alternate}...")

            # Extract BOM Components under the current Alternate
            bom_components = re.search(rf"{alternate}.*?BOI 67-Bonding Diagram", content, re.DOTALL)
            if bom_components:
                bom_section = bom_components.group(0)

                # Extract Package Kits dynamically
                package_kits = re.findall(r"Package Kit\s+([^\s]+)\s+PKT", bom_section)
                if not package_kits:
                    print(f"No Package Kits found in {alternate}.")
                else:
                    print(f"Package Kits found in {alternate}: {package_kits}")

                # Loop through each Package Kit
                for package_kit in package_kits:
                    # Extract Piece Parts specific to this Package Kit
                    package_kit_section = re.search(
                        rf"Package Kit\s+{package_kit}.*?Piece Parts\s+(.*?)\s+(Package Kit|BOI|$)",
                        bom_section, re.DOTALL
                    )
                    if package_kit_section:
                        piece_parts_section = package_kit_section.group(1)
                        # Extract individual piece parts (only long numbers followed by uppercase letters)
                        piece_parts = re.findall(r"(\d{10,})\s+([A-Z]+)", piece_parts_section)
                    else:
                        piece_parts = []

                    # Sort Piece Parts in the order FRAME, EPXY, WIRE, MOLD
                    piece_parts_dict = {desc: num for num, desc in piece_parts}
                    sorted_piece_parts = [
                        (piece_parts_dict.get("FRAME", None), "FRAME"),
                        (piece_parts_dict.get("EPXY", None), "EPXY"),
                        (piece_parts_dict.get("WIRE", None), "WIRE"),
                        (piece_parts_dict.get("MOLD", None), "MOLD")
                    ]

                    # Prepare piece parts in a single row
                    piece_parts_flat = []
                    for num, desc in sorted_piece_parts:
                        if num:
                            piece_parts_flat.extend([num, desc])  # Add Part Number and Description

                    # Extract Primary Die value
                    primary_die_match = re.search(r"Primary Die\s+([^\t\n]+)", bom_section)
                    primary_die = primary_die_match.group(1) if primary_die_match else "Primary Die Not Found"

                    # Extract Revision History (latest entry)
                    revision_history_match = re.search(
                        r"Revision History\s+Rev\s+Rev Date\s+Details\s+(\d+)\s+([^\s]+)", content, re.DOTALL
                    )
                    if revision_history_match:
                        revision_history = revision_history_match.group(1).strip()  # Extract the revision number
                        revision_date = revision_history_match.group(2).strip()  # Extract only the date
                    else:
                        revision_history = "Revision History Not Found"
                        revision_date = "Date Not Found"

                    # Extract PART_OWNER NOTIFY_SUPPLIER details
                    part_owner_match = re.search(r"PART_OWNER NOTIFY_SUPPLIER previous_value:NULL;new_value:([^\n]+)", content)
                    part_owner = part_owner_match.group(1).strip() if part_owner_match else "PART_OWNER NOTIFY_SUPPLIER Not Found"

                    # Write data in a single row
                    sheet.append([
                        section_name,
                        part_number,
                        part_desc,
                        primary_die,
                        "",  # Placeholder for "Piece Parts" column
                        *piece_parts_flat,  # Flattened piece parts
                        revision_date,
                        f"PART_OWNER NOTIFY_SUPPLIER previous_value:NULL;new_value:{part_owner}",
                        package_kit
                    ])

                    # Check if the Part Number and Package Kit already exist in the database
                    cursor.execute("""
                        SELECT COUNT(*) 
                        FROM cst_onsemi_MBOIExtractedData 
                        WHERE [Part Number] = ? AND [Package Kit] = ?
                    """, part_number, package_kit)
                    exists = cursor.fetchone()[0]

                    if exists:
                        print(f"Part Number '{part_number}' with Package Kit '{package_kit}' already exists. Skipping insertion.")
                    else:
                        # Insert data into the database
                        try:
                            cursor.execute("""
                                INSERT INTO cst_onsemi_MBOIExtractedData (
                                    [Orderable Part Section], [Part Number], [Description], [Primary Die],
                                    [Piece Parts], [Part NumberF], [DescriptionF], [Part NumberE], [DescriptionE],
                                    [Part NumberW], [DescriptionW], [Part NumberM], [DescriptionM],
                                    [Revision History (Date)], [Revision History (Details)], [Package Kit]
                                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                            """, section_name, part_number, part_desc, primary_die, "",  # Placeholder for "Piece Parts"
                                piece_parts_flat[0] if len(piece_parts_flat) > 0 else None,
                                piece_parts_flat[1] if len(piece_parts_flat) > 1 else None,
                                piece_parts_flat[2] if len(piece_parts_flat) > 2 else None,
                                piece_parts_flat[3] if len(piece_parts_flat) > 3 else None,
                                piece_parts_flat[4] if len(piece_parts_flat) > 4 else None,
                                piece_parts_flat[5] if len(piece_parts_flat) > 5 else None,
                                piece_parts_flat[6] if len(piece_parts_flat) > 6 else None,
                                piece_parts_flat[7] if len(piece_parts_flat) > 7 else None,
                                revision_date,
                                f"PART_OWNER NOTIFY_SUPPLIER previous_value:NULL;new_value:{part_owner}",
                                package_kit
                            )
                            conn.commit()
                        except Exception as e:
                            print(f"Error inserting data into database: {e}")
            else:
                print(f"BOM Components not found for {alternate}. Skipping.")

        # Move the processed file to the backup folder with a new name
        if not os.path.exists(backup_folder):
            os.makedirs(backup_folder)
        new_file_name = f"process_{process_date}_{file_name}"
        shutil.move(file_path, os.path.join(backup_folder, new_file_name))

    # Save the Excel file with the new naming format
    output_file = os.path.join(input_folder, f"{timestamp}_extracted_data.xlsx")
    workbook.save(output_file)
    print(f"Data has been written to {output_file}")

    # Close the database connection
    conn.close()